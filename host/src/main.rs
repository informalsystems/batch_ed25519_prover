// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use ed25519_dalek::{Signature, Signer, SigningKey, VerifyingKey};
use methods::{BATCH_ED25519_GUEST_ELF, BATCH_ED25519_GUEST_ID};
use rand_core::OsRng;
use risc0_zkvm::{default_prover, ExecutorEnv};

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // A default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    let n_signatures = std::env::var("N_SIGNATURES")
        .unwrap_or_else(|_| "1".to_string())
        .parse::<usize>()
        .expect("N_SIGNATURES must be a valid integer");

    let inputs = (0..n_signatures)
        .map(|i| {
            // Generate a random ed25519 keypair and sign the message.
            let signing_key: SigningKey = SigningKey::generate(&mut OsRng);
            let verifying_key: VerifyingKey = signing_key.verifying_key();
            let message = format!(
                "#{i}: This is a message that will be signed, and verified within the zkVM"
            )
            .as_bytes()
            .to_vec();
            let signature: Signature = signing_key.sign(&message);

            (
                verifying_key.to_bytes(),
                message.clone(),
                signature.to_bytes().to_vec(),
            )
        })
        .collect::<Vec<_>>();

    let env = ExecutorEnv::builder()
        .write(&inputs)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover.prove(env, BATCH_ED25519_GUEST_ELF).unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let _output: u32 = receipt.journal.decode().unwrap();

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify(BATCH_ED25519_GUEST_ID).unwrap();
}
